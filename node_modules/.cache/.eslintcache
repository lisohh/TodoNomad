[{"/Users/lisyongsyong/repository/TodoNomad/src/index.tsx":"1","/Users/lisyongsyong/repository/TodoNomad/src/theme.ts":"2","/Users/lisyongsyong/repository/TodoNomad/src/App.tsx":"3","/Users/lisyongsyong/repository/TodoNomad/src/components/ToDoList.tsx":"4","/Users/lisyongsyong/repository/TodoNomad/src/components/CreateCategory.tsx":"5","/Users/lisyongsyong/repository/TodoNomad/src/components/atoms.tsx":"6","/Users/lisyongsyong/repository/TodoNomad/src/components/ToDo.tsx":"7","/Users/lisyongsyong/repository/TodoNomad/src/components/CreateToDo.tsx":"8"},{"size":438,"mtime":1677663206682,"results":"9","hashOfConfig":"10"},{"size":257,"mtime":1677503038558,"results":"11","hashOfConfig":"10"},{"size":1877,"mtime":1677680183339,"results":"12","hashOfConfig":"10"},{"size":2584,"mtime":1677683314476,"results":"13","hashOfConfig":"10"},{"size":1348,"mtime":1677682820787,"results":"14","hashOfConfig":"10"},{"size":1682,"mtime":1677653792195,"results":"15","hashOfConfig":"10"},{"size":1331,"mtime":1677683119675,"results":"16","hashOfConfig":"10"},{"size":996,"mtime":1677682839471,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"nx328h",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lisyongsyong/repository/TodoNomad/src/index.tsx",[],[],[],"/Users/lisyongsyong/repository/TodoNomad/src/theme.ts",[],[],"/Users/lisyongsyong/repository/TodoNomad/src/App.tsx",[],[],"/Users/lisyongsyong/repository/TodoNomad/src/components/ToDoList.tsx",["44"],[],"import React, { useState } from \"react\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport {\n  type IToDo,\n  currentCategoryState,\n  categoryOptionsState,\n  toDoSelector,\n  toDoState,\n} from \"./atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nfunction ToDoList() {\n  //const toDos = useRecoilValue(toDoState);\n  //console.log(toDos);\n  const filteredToDos = useRecoilValue(toDoSelector);\n  const setTodos = useSetRecoilState(toDoState);\n  const [categories, setCategories] = useRecoilState(categoryOptionsState);\n  const [category, setCategory] = useRecoilState(currentCategoryState);\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n\n  const deleteTodo = (targetId: IToDo[\"id\"]) => {\n    setTodos((old) => old.filter((toDo) => toDo.id !== targetId));\n  };\n  const deleteCategoryOption = (targetCategory: string) => {\n    setCategories((old) =>\n      old.filter((category) => category !== targetCategory)\n    );\n    setTodos((old) => old.filter((toDo) => toDo.category !== targetCategory));\n  };\n\n  return (\n    <div>\n      <div className=\"flex justify-center gap-6 mb-4\">\n        {categories.map((categoryOption) => (\n          <React.Fragment key={categoryOption}>\n            <label>\n              <input\n                className=\"radio radio-primary align-middle\"\n                onChange={onChange}\n                type=\"radio\"\n                name=\"category\"\n                value={categoryOption}\n                checked={categoryOption === category}\n              />\n              <span className=\"align-middle text-lg font-medium ml-2\">\n                {categoryOption}\n                <button\n                  className=\"btn btn-accent ml-2\"\n                  onClick={(e) => {\n                    deleteCategoryOption(categoryOption);\n                  }}\n                >\n                  delete\n                </button>\n              </span>\n            </label>\n          </React.Fragment>\n        ))}\n      </div>\n      <section className=\"bg-lime-100 min-h-screen\">\n        <CreateToDo />\n        {filteredToDos?.map((toDo) => (\n          <div key={toDo.id} className=\"flex justify-center m-2\">\n            <ToDo {...toDo} />\n            <button\n              className=\"btn btn-secondary ml-0\"\n              onClick={(e) => {\n                deleteTodo(toDo.id);\n              }}\n            >\n              Delete\n            </button>\n          </div>\n        ))}\n      </section>\n    </div>\n  );\n}\n\nexport default ToDoList;\n","/Users/lisyongsyong/repository/TodoNomad/src/components/CreateCategory.tsx",[],[],"/Users/lisyongsyong/repository/TodoNomad/src/components/atoms.tsx",[],[],"/Users/lisyongsyong/repository/TodoNomad/src/components/ToDo.tsx",[],[],"/Users/lisyongsyong/repository/TodoNomad/src/components/CreateToDo.tsx",[],[],{"ruleId":"45","severity":1,"message":"46","line":1,"column":17,"nodeType":"47","messageId":"48","endLine":1,"endColumn":25},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar"]