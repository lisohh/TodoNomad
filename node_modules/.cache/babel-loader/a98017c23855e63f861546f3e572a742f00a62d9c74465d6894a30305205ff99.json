{"ast":null,"code":"import { atom, selector } from \"recoil\";\nimport { recoilPersist } from \"recoil-persist\";\n\n// export enum Categories {\n//   \"TO_DO\" = \"TO_DO\",\n//   \"DOING\" = \"DOING\",\n//   \"DONE\" = \"DONE\",\n// }\n\n// export const categoryState = atom<Categories>({\n//   key: \"category\",\n//   default: Categories.TO_DO,\n// });\n\n//한번에 하나만 선택할 수 있으므로 배열이 아니다.\nexport const currentCategoryState = atom({\n  key: \"category\",\n  default: \"TO_DO\"\n});\n\n// 1. localStorage에 저장하는 effect를 만든다\nconst {\n  persistAtom: persistCategoryOptionsAtom\n} = recoilPersist({\n  key: \"CATEGORY_OPTIONS\",\n  // this key is using to store data in local storage\n  storage: localStorage // configurate which stroage will be used to store the data\n});\n\nexport const categoryOptionsState = atom({\n  key: \"categoryOptions\",\n  default: [\"TO_DO\", \"DOING\", \"DONE\"],\n  effects_UNSTABLE: [persistCategoryOptionsAtom]\n});\n\n// 1. localStorage에 저장하는 effect를 만든다\nconst {\n  persistAtom: persistTodoAtom\n} = recoilPersist({\n  key: \"TODOS\",\n  // this key is using to store data in local storage\n  storage: localStorage // configurate which stroage will be used to store the data\n});\n\nexport const toDoState = atom({\n  key: \"toDo\",\n  default: [],\n  effects_UNSTABLE: [persistTodoAtom] // 2. atom에 effect 기능을 추가한다\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: _ref => {\n    let {\n      get\n    } = _ref;\n    const toDos = get(toDoState);\n    const category = get(currentCategoryState);\n    return toDos.filter(toDo => toDo.category === category);\n  }\n});","map":{"version":3,"names":["atom","selector","recoilPersist","currentCategoryState","key","default","persistAtom","persistCategoryOptionsAtom","storage","localStorage","categoryOptionsState","effects_UNSTABLE","persistTodoAtom","toDoState","toDoSelector","get","_ref","toDos","category","filter","toDo"],"sources":["/Users/lisyongsyong/repository/TodoNomad/src/components/atoms.tsx"],"sourcesContent":["import { atom, selector } from \"recoil\";\nimport { recoilPersist } from \"recoil-persist\";\n\n// export enum Categories {\n//   \"TO_DO\" = \"TO_DO\",\n//   \"DOING\" = \"DOING\",\n//   \"DONE\" = \"DONE\",\n// }\n\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: string;\n}\n\n// export const categoryState = atom<Categories>({\n//   key: \"category\",\n//   default: Categories.TO_DO,\n// });\n\n//한번에 하나만 선택할 수 있으므로 배열이 아니다.\nexport const currentCategoryState = atom<string>({\n  key: \"category\",\n  default: \"TO_DO\",\n});\n\n// 1. localStorage에 저장하는 effect를 만든다\nconst { persistAtom: persistCategoryOptionsAtom } = recoilPersist({\n  key: \"CATEGORY_OPTIONS\", // this key is using to store data in local storage\n  storage: localStorage, // configurate which stroage will be used to store the data\n});\n\nexport const categoryOptionsState = atom<string[]>({\n  key: \"categoryOptions\",\n  default: [\"TO_DO\", \"DOING\", \"DONE\"],\n  effects_UNSTABLE: [persistCategoryOptionsAtom],\n});\n\n// 1. localStorage에 저장하는 effect를 만든다\nconst { persistAtom: persistTodoAtom } = recoilPersist({\n  key: \"TODOS\", // this key is using to store data in local storage\n  storage: localStorage, // configurate which stroage will be used to store the data\n});\n\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: [],\n  effects_UNSTABLE: [persistTodoAtom], // 2. atom에 effect 기능을 추가한다\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(currentCategoryState);\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,QAAQ;AACvC,SAASC,aAAa,QAAQ,gBAAgB;;AAE9C;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;;AAEA;AACA,OAAO,MAAMC,oBAAoB,GAAGH,IAAI,CAAS;EAC/CI,GAAG,EAAE,UAAU;EACfC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA,MAAM;EAAEC,WAAW,EAAEC;AAA2B,CAAC,GAAGL,aAAa,CAAC;EAChEE,GAAG,EAAE,kBAAkB;EAAE;EACzBI,OAAO,EAAEC,YAAY,CAAE;AACzB,CAAC,CAAC;;AAEF,OAAO,MAAMC,oBAAoB,GAAGV,IAAI,CAAW;EACjDI,GAAG,EAAE,iBAAiB;EACtBC,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC;EACnCM,gBAAgB,EAAE,CAACJ,0BAA0B;AAC/C,CAAC,CAAC;;AAEF;AACA,MAAM;EAAED,WAAW,EAAEM;AAAgB,CAAC,GAAGV,aAAa,CAAC;EACrDE,GAAG,EAAE,OAAO;EAAE;EACdI,OAAO,EAAEC,YAAY,CAAE;AACzB,CAAC,CAAC;;AAEF,OAAO,MAAMI,SAAS,GAAGb,IAAI,CAAU;EACrCI,GAAG,EAAE,MAAM;EACXC,OAAO,EAAE,EAAE;EACXM,gBAAgB,EAAE,CAACC,eAAe,CAAC,CAAE;AACvC,CAAC,CAAC;;AAEF,OAAO,MAAME,YAAY,GAAGb,QAAQ,CAAC;EACnCG,GAAG,EAAE,cAAc;EACnBW,GAAG,EAAEC,IAAA,IAAa;IAAA,IAAZ;MAAED;IAAI,CAAC,GAAAC,IAAA;IACX,MAAMC,KAAK,GAAGF,GAAG,CAACF,SAAS,CAAC;IAC5B,MAAMK,QAAQ,GAAGH,GAAG,CAACZ,oBAAoB,CAAC;IAC1C,OAAOc,KAAK,CAACE,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACF,QAAQ,KAAKA,QAAQ,CAAC;EAC3D;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}